[[configuration]]
== Configuration

Configure the agent with `AgentConfigBuilder` passing the `AgentConfiguration` to the `start` function.

// some config example that preferably is correct unlike mine
[source,swift]
----
let config = AgentConfigBuilder()
                .withURL(URL(string: "http://localhost:8200"))
                .withSecretToken("<Token>")
                .build()

Agent.start(with:config)
----

The `AgentConfigBuilder` can be configured with the following functions

[discrete]
[[configuration-options]]
=== Configuration options

[discrete]
[[withURL]]
==== `withURL`

* *Type:* URL
* *Default:* `http://127.0.0.1:8200`

[discrete]
[[collectorHost]]
==== `withHost`

* *Type:* String
* *Default:* `127.0.0.1`
// * *Env:* ``

The APM Server host. This will override the host set using `withURL`.

[discrete]
[[collectorPort]]
==== `withPort`

* *Type:* Int
* *Default:* `8200`
// * *Env:* ``

The APM Server port. This will override the port set using `withURL`.

[discrete]
[[withTLS]]
==== `withTLS`
* *Type:* Bool
* *Default:* false

Flags whether the APM Server is secured with TLS. This will override the protocol set using `withURL`.

[discrete]
[[withSecretToken]]
==== `withSecretToken`
* *Type:* String
* *Default:* nil
* *Env:* `OTEL_EXPORTER_OTLP_HEADERS`

Sets the secret token for connecting to an authenticated APM Server. If using the env-var, the whole header map must be define per https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md[OpenTelemetry Protocol Exporter Config] (e.g.: `OTEL_EXPORTER_OTLP_HEADERS="Authorization=bearer <secret token>"`)
